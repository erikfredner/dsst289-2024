---
title: "Notebook 12"
subtitle: "DSST289: Introduction to Data Science"
author: "Erik Fredner"
date: today
echo: true
format:
  html:
    anchor-sections: true
    code-tools: false
    embed-resources: true
    link-external-icon: true
    link-external-newwindow: true
    number-sections: true
    smooth-scroll: true
    toc: true
editor:
  markdown:
    wrap: 72
editor_options: 
  chunk_output_type: inline
---

# Getting Started

1. Click **Session > Clear Workspace...**
2. Click **Session > Restart R**
3. Run the following code chunk.

```{r}
#| message: false
library(tidyverse)
library(ggrepel)

# set default theme
theme_set(theme_minimal())
```

# About this notebook

This notebook is **two notebooks in one**.

The first part is about penguins. The second part is about food.

Both halves continue our review of material from the first ten notes in this class. Some questions should seem easy. Others will be tricky.

# Penguins

Today we are going to look at the famous [`palmerpenguins` dataset](https://allisonhorst.github.io/palmerpenguins/).

## Datasets as packages

One of the great things about R is that datasets can be distributed as packages. This means that you can install a package and immediately have access to a dataset. The `palmerpenguins` package is one such package. The following code chunk will check if it is installed on your machine, and, if not, install it:

```{r}
if (!rlang::is_installed("palmerpenguins")) {
  install.packages("palmerpenguins")
}

library(palmerpenguins)
```

And then load it from the variable `penguins`:

```{r}
penguins <- penguins |>
  filter(!is.na(sex)) # keep penguins with a value in `sex`

penguins |>
  slice_sample(n = 5)
```

## Exploratory data analysis

We have discussed [exploratory data analysis (EDA)](https://en.wikipedia.org/wiki/Exploratory_data_analysis) previously. The general idea is to understand your data through visualization, summary, and other techniques we have practiced. The first few questions create basic plots with this dataset and might seem easy.

However, the important thing is that they teach you about the form and content of the `penguins` dataset, too.

### Scatterplots

First, create a scatterplot with body mass on the x-axis and
bill length on the y-axis. Color the points based on the sex of the penguin using `viridis`.

```{r, question-01}
```

Recreate the previous scatterplot. This time, color the points based on the species of the penguin. Use the shape aesthetic to indicate the sex of the penguin.

```{r, question-02}
```

:::{.callout-tip}
What patterns do you observe in the data?
:::

Now, let's create a similar scatter plot with mass on the x-axis, bill length
on the y-axis, and color designating species. This time, indicate sex by shape.

### Summarized scatterplots

However, instead of showing individual penguins, create a scatterplot showing the average
body mass and bill length of all penguins from the same species and sex. Your
plot should have exactly six points. Assign the points a **fixed** aesthetic of `size = 5` to make them obvious.

```{r, question-03}
#| message: false
```

### Joining

Let's create a small table in R that gives the scientific names of the penguins.

```{r}
latin_names <- tibble(
  common_name = c("Adelie", "Chinstrap", "Gentoo"),
  scientific_name = c(
    "Pygoscelis adeliae",
    "Pygoscelis antarcticus",
    "Pygoscelis papua"
  )
)
latin_names
```

Re-create the plot from question 3, but make the color
legend correspond to the **Latin name** of each penguin species.

```{r, question-04}
#| message: false
```

### Arrows

In the next question, we want to visualize the same information as above but
instead of using two differently shaped points to designate the two different
sexes of penguins within a species, we want to have an arrow for each species
going from the female point to the male point.

This will require you to use a pivot! Note that you can pass multiple columns to the `values_from` argument, and will
likely need to do this to complete the question. You can keep the scientific
names in the legend.

```{r, question-05}
#| message: false
```

Finally, re-create the plot from question 5, but add labels giving an 
appropriate title and names to all of the aesthetics.

```{r, question-06}
#| message: false
```

# What do people in the US eat?

Goodbye, penguins! Hello, food!

## Data

Now, we are going to look at a dataset collected jointly by the
USDA and the CDC called [*What We Eat in America*](https://catalog.data.gov/dataset/what-we-eat-in-america-wweia-database-f7f35).

The data is collected by 
surveying the specific food items that several thousand people across the 
country consume over the course of a two-day period. The main dataset we will
use contains one row for each reported food that an individual ate. The data
can be read in with the following code; the feature `id` gives an identifier
for each participant, the `food_code` indicates the type of food eaten, and 
all of the nutritional columns are given in grams (except `kcal`, which is in kilocalories).  

```{r}
#| message: false
food <- read_csv("../data/wweia_food.csv.bz2")
food
```

We also have a dataset showing demographic information about each participant.
The educational level is given as a coded number. (I will provide more details about this when needed.)

The `ratio_to_poverty` variable indicates the ratio of the family household 
income to the poverty level. It's truncated from above at 5; so values over
5 (households that make more than five times the poverty level) are pushed down
to the value of 5.

```{r}
#| message: false
demo <- read_csv("../data/wweia_demo.csv.bz2")
demo
```

Finally, we also have a set of metadata about each of the food codes above. 
These give the specific food description, a less-granular category, and the
least-granular food group. These can be joined with the key `food_code`.

```{r}
#| message: false
meta <- read_csv("../data/wweia_meta.csv.bz2")
meta
```

We will look at some of the main features today while introducing some new 
techniques that will help understand this data.

## Calories

### Total Calories

Our data consists of a single day of eating patterns from each individual. 
Create a plot that shows the distribution (`geom_density`) of the total
number of calories that individuals in the dataset consumed on this day. You'll
see that a small number of individuals consumed a very large amount of calories.

After creating the initial plot, try to remove some of the outliers to make the
plot easier to read. (I set the upper limit as 6,000 kcal/day, but you could choose a different value.) Also, pick a color to make the plot nicer to 
look at.

```{r, question-07}
```

### Calories by gender

We don't have any information about the weight or activity level of each 
individual. We do, though, have a reported age and gender. Re-create your 
first plot, but this time show the distribution for male and female
participants. Note the similarities and differences between the two groups.

```{r, question-08}
```

### Calories by age

We also have the age of each participant. These are given in years and if we
try to do the above plot for each individual year, things will get fairly 
messy. Perhaps a better way would be to group the ages together. We could do
this manually with a bunch of `if_else` functions; another approach is to use
a version of the `cut` function. We can include this in our pipeline:

```{r}
#| echo: true
#| eval: false
mutate(
  age = cut(age,
    breaks = seq(0, 80, by = 20),
    include.lowest = TRUE
  )
)
```

This will change the continuous ages into groups of 20 years
each. Use this technique to show the distribution of calories by age group.

```{r, question-09}
```

### Faceting

The plot you just made should be somewhat readable, but it can be slightly hard
to see each distribution on top of one another. One solution to this is to add
the function `facet_wrap` to our plot. This function creates a number of small
plots all at once broken out by a new variable. For example, the following will
facet by our age variable:

```{r}
#| echo: true
#| eval: false
facet_wrap(~age)
```

Modify your previous plot in the block below using the facet wrap. Since this
will make more space, split the ages into 10-year buckets in lieu of 20-year
buckets.

```{r, question-10}
```

### Finalizing the plot

Now, with all of that added space, let's add back the gender variable using the
`fill` aesthetic. This will show the distribution of calories by age group and
gender. We'll also add some labels for this plot.

```{r, question-11}
```

## Meal Times

The previous section analyzed how much people eat. Now, we are going to analyze when people eat.

### Calories per hour

Create a bar plot showing time on the x-axis and the average number of calories
eaten at each hour of the day. Use the function `factor` to convert the numeric
time feature to a categorical feature; this will make the plot easier to read.

:::{.callout-warning}
The "obvious" approach to this problem will likely result in a subtle error that makes the plot look incorrect. Check the data to figure out what might be going wrong.
:::

```{r, question-12}
```


### By meal

The data includes information about mealtime names. Filter the data to include
only Breakfast, Lunch, and Dinner. Repeat the previous plot you had, but color
the bars based on the name of the meal. You should see that the bar plot stacks
the categories on top of one another.

```{r, question-13}
#| message: false
```

The geometry `geom_col` has a parameter called `position` that we can set to
describe how the intersecting bars, as above, are dealt with. The default is to
stack the bars; we can change this by setting a different position. Below,
remake your plot with `position = "dodge"` and note what happens.

```{r, question-14}
#| message: false
```

I think the dodge method looks better than the stack one in the above example.
However, I think there is an even better option: setting the position to 
"identity". This plots the bars right on top of one another, which at first 
seems like a terrible idea. However, if we also set `alpha = 0.7`, we can
see the plot just as we did with the density plots in the previous section.
Try this below:

```{r, question-15}
#| message: false
```

Can you see the distribution of the meals across the hours of the day? Are the names people give to their meals what you might expect from your own meal times?

### Heatmap

Alternatively, we can create a heatmap to show the average number of calories consumed by meal per hour. This will require a new geometry, `geom_tile`.


:::{.callout-tip}
If you put `meal_name` on the y-axis, you will need to set the levels of the factors in order to put them in the correct order since dinner comes after lunch, but "d" comes before "l."

You can do this like so:

```{r}
#| echo: true
#| eval: false

mutate(
  meal_name = factor(
    meal_name,
    levels = c("Breakfast", "Lunch", "Dinner")
  )
)
```
:::

```{r, question-16}
#| message: false
```

## Data feminism review

Once you have finished with the questions, above take a moment to consider the principles
from our Data Feminism notes and how they might apply to the datasets describing how people eat.

:::{.callout-note}
While we have not looked at them yet, the data includes 
information about race, language, and income.
:::

1. How are
the ways that the data are organized making non-neutral decisions about what
we can do with it?
2. What are the consequences of not providing names or locations
for the individuals?
3. What are some possible ways that this data might
be abused?
4. How could this information be used for social good? 
