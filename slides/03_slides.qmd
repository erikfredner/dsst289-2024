---
title: "Aesthetics & Scales with Pok√©mon"
subtitle: "DSST 289: Introduction to Data Science"
author: "Erik Fredner"
date: "`r Sys.Date()`"
echo: true
format:
  revealjs:
    logo: "images/by-sa.png"
    footer: "https://fredner.org"
    embed-resources: true
    scrollable: true
    code-fold: true
---

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(ggrepel)
```

## Outline {.smaller}

- Homework
- Aesthetics & scales: so what?
- Aesthetics & scales with Pok√©mon
  - `pokemon` data
  - `geom_point`
  - `geom_text` & `label`
  - `scale_` & `limits`
  - `n.breaks`
  - `color`
  - `scale_color`
  - `size`
  - `shape`
  - `facet_`ing plots

## Homework

- Share the data visualizations you found online with the people sitting near you.
- What kind of data would you need to recreate them?

## Aesthetics: so what?

Aesthetics (such as color, size, shape, etc.) determine how data points are visually distinguished in a plot.

### For example:

<span style="color:red;">Democrats</span> vs. <span style="color:blue;">Republicans</span>

## Scales: so what?

- Scales control how data is mapped onto visual dimensions like the x- and y-axes.
- Proper scaling can prevent misleading representations.

```{r}
# Load necessary libraries
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(knitr)

# Dummy data
data <- data.frame(
  year = c(2010, 2011, 2012, 2013, 2014, 2015),
  interest_rate = c(3.5, 3.7, 3.6, 3.8, 3.9, 4.0)
)

# Plot 1: With a narrow y-axis
p1 <- ggplot(data, aes(x = year, y = interest_rate)) +
  geom_line(color = "blue", linewidth = 1) +
  geom_point(color = "blue", size = 3) +
  scale_y_continuous(limits = c(3.4, 4.1))

# Plot 2: With a broader y-axis
p2 <- ggplot(data, aes(x = year, y = interest_rate)) +
  geom_line(color = "red", linewidth = 1) +
  geom_point(color = "red", size = 3) +
  scale_y_continuous(limits = c(0, 5))

# Arrange plots side by side
grid.arrange(p1, p2, ncol = 2)
```

  
## `pokemon` data

```{r}
pokemon <- read_csv("../data/pokemon.csv")

# take a look at the data:
pokemon |> 
  head() |> 
  kable()
```

## Aesthetics & Scales with Pok√©mon

The highest `defense` and `hp` is in the top-right by default:

```{r}
pokemon |>
  ggplot() +
  geom_point(aes(x = defense, y = hp))
```

## Modifying scales

Let's suppose we wanted to flip that and see the Pokemon with the highest `defense` and **lowest** `hp` in the top-right corner.

```{r}
pokemon |>
  ggplot() +
  geom_point(aes(x = defense, y = hp)) +
  # reverse the y-axis
  scale_y_reverse()
```

## Combining `scale_`, `aes`, & `geom_`

Who has low `hp` and high `defense`?

```{r}
pokemon |>
  ggplot() +
  geom_point(aes(x = defense, y = hp)) +
  scale_y_reverse() +
  # new:
  geom_text(aes(x = defense, y = hp, label = name))
```

## Limiting scales

```{r}
#| code-line-numbers: "7-10"

pokemon |>
  ggplot() +
  geom_point(aes(x = defense, y = hp)) +
  scale_y_reverse() +
  # repel the text labels:
  geom_text_repel(aes(x = defense, y = hp, label = name)) +
  # limit the x-axis to `defense` of 150 or more:
  # `NA` ("Not Available") is a missing value indicator.
  # We use it here to say that there is no upper limit on the x-axis.
  scale_x_continuous(limits = c(150, NA))
```

## Increasing `n.breaks`

```{r}
pokemon |>
  ggplot() +
  geom_point(aes(x = defense, y = hp)) +
  scale_y_reverse() +
  geom_text_repel(aes(x = defense, y = hp, label = name)) +
  # make it easier to identify the precise values of `defense`:
  scale_x_continuous(limits = c(150, NA), n.breaks = 30)
```

## Color

- We can use color to see patterns in the data by variables
- e.g., Are there relationships between `type_1`, `defense`, and `hp`?
- We're also going to `filter` for first generation Pokemon to reduce the number of points.

## Color by `type_1`

```{r}
pokemon |>
  filter(generation == 1) |>
  ggplot() +
  geom_point(aes(x = defense, y = hp, color = type_1)) +
  geom_text_repel(aes(x = defense, y = hp, label = name))
```

## Custom color

Let's use colors associated with üî•, üçÉ, and üíß Pokemon:

```{r}
#| code-line-numbers: "8-12"

pokemon |>
  filter(generation == 1) |>
  filter(type_1 %in% c("Water", "Fire", "Grass")) |>
  ggplot() +
  geom_point(aes(x = defense, y = hp, color = type_1)) +
  geom_text_repel(aes(x = defense, y = hp, label = name)) +
  # use the `type_1` colors instead of the default:
  scale_color_manual(values = c(
    Water = "blue",
    Fire = "red",
    Grass = "green"
  ))
```

## `scale_color`

Mewtwo has a high `stat_total`:

```{r}
#| code-line-numbers: "4-8"
pokemon |>
  filter(generation == 1) |>
  ggplot() +
  # color the points by `stat_total` instead of `type1`:
  geom_point(aes(x = defense, y = hp, color = stat_total)) +
  # use the `viridis` color palette instead of the default:
  scale_color_viridis_c() +
  geom_text_repel(aes(x = defense, y = hp, label = name))
```

## `size`

Magikarp has a low `stat_total`:

```{r}
pokemon |>
  filter(generation == 1) |>
  # just water pokemon
  filter(type_1 == "Water") |>
  ggplot() +
  # new: `size` by `stat_total`
  geom_point(aes(x = defense, y = hp, size = stat_total)) +
  geom_text_repel(aes(x = defense, y = hp, label = name))
```

## Combine `size` and `color`

```{r}
pokemon |>
  filter(generation == 1) |>
  # just psychic pokemon
  filter(type_1 == "Psychic") |>
  ggplot() +
  # new: `color` by `stat_total`, too
  geom_point(aes(x = defense, y = hp, size = stat_total, color = stat_total)) +
  # use the `viridis` color palette instead of the default:
  scale_color_viridis_c() +
  geom_text_repel(aes(x = defense, y = hp, label = name))
```

## Combining color and shape

```{r}
pokemon |>
  # filter for first gen
  filter(generation == 1) |>
  # filter for a few types
  filter(type_1 %in% c("Normal", "Rock", "Bug", "Poison")) |>
  ggplot() +
  geom_point(aes(
    x = defense,
    y = hp,
    # new: shape points by `type_1`
    shape = type_1,
    # color points by `stat_total`
    color = stat_total
  )) +
  scale_color_viridis_c() +
  geom_text_repel(aes(x = defense, y = hp, label = name))
```

## Bonus: `facet`-ing plots

```{r}
# faceting allows us to split a plot into multiple panels based on a factor
# maintaining the scales makes them directly comparable
pokemon |>
  # exclude top 1% of stat_total to see better color distribution:
  filter(stat_total < quantile(stat_total, 0.99)) |>
  ggplot() +
  geom_point(aes(x = defense, y = hp, color = stat_total)) +
  scale_color_viridis_c() +
  # new: `~` means "by", so we are saying "facet wrap by `type_1`"
  facet_wrap(~type_1)
```

## Summary

- **Aesthetics** determine how data points are visually distinguished, including aspects like color, size, and shape.
- **Scales** control how data is mapped onto visual dimensions such as x- and y-axes. Proper scaling ensures that visualizations are easy to interpret and not misleading.
- Manipulating both aesthetics and scales can reveal patterns and/or outliers in data.
- Preserving scales on `facet`ed plots can make them directly comparable.
