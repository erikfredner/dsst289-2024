---
title: "Tabular Data"
subtitle: "DSST 289: Introduction to Data Science"
author: "Erik Fredner"
date: 2024-08-28
format:
  revealjs:
    echo: true
    logo: "images/by-sa.png"
    footer: "https://fredner.org"
    scrollable: true
    embed-resources: true
---

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(knitr)
library(clipr)
```


# Homework check-in

1. Received Blackboard announcement?
2. Read [the notes](https://blackboard.richmond.edu/bbcswebdav/pid-1849604-dt-content-rid-16130973_1/xid-16130973_1) for today?
3. Installed R, RStudio, and the `tidyverse`?
4. Completed questions at the end of the notes?
5. Uploaded completed questions to Blackboard?


# Tabular Data

- Tabular data is a common data structure.
- It is a table ("table" → "tabular") with rows and columns.
- Rows contain observations.
- Columns contain variables (which are also occasionally called features).

## Excel is tabular

![Table with dog breed, height, weight](images/dogs.png)

## Observations (dogs) go in rows

![Dogs with highlighted row.](images/dogs_row.png)

## Variables go in columns

![Dogs with `breed` column highlighted.](images/dogs_col.png)

## `tibble`s are tabular

```{r, echo=TRUE}
#| code-line-numbers: "|1|2|3|4"


breed <- c("Shih-Tzu", "Labrador", "Beagle", "Newfoundland", "Chihuahua", "Affenpinscher")
weight <- c(5.5, 33, 10.2, 70, 1.3, 9.6)
height <- c(24, 56, 34, 69, 20, 27)
dogs <- tibble(breed, weight, height)
dogs
```

## One variable: `breed`

```{r, echo=TRUE}
dogs |>
  # `select()` says "select these columns."
  select(breed)
```

## One observation: `"Beagle"`

```{r, echo=TRUE}
dogs |>
  filter(breed == "Beagle")
```

- `==` is a comparison operator that means "is equal to."
- We're saying, "Filter this tibble for rows where `breed` is equal to `"Beagle"`."
- Note the distinction betwen **variables** and **observations**.

## Data types

- Every variable (column) has one and only one data type.
- Two common data types in the `dogs` table:
  - `character` (text, e.g., `"Beagle"`)
  - `numeric` (numbers, e.g., `10.2`)

## Data types in `dogs`

```{r, echo=TRUE}
dogs
```

- `<chr>` is short for `character`
- `<dbl>` is short for `double`, which is a type of `numeric`

## Tabular data takeaways

- Good data structure is the most important thing we will learn in this class.
- Real-world data science is largely about gathering, cleaning, and organizing data.
  - In real life, data scientists spend **most of their time** doing this.
- Don't take good data for granted!

# Introduction to some key concepts in R

## Objects

- Everything in R is an object.
- We usually create new objects by assigning values to names:

```{r, echo=TRUE}
almost_pi <- 3.14
almost_pi <- 3.1415
almost_pi <- 3.141592653589793238462643383279
# note the rounding:
almost_pi
```

## Functions

Functions take inputs and generate outputs.

`round()` is a function that rounds a number (and/or a vector of numbers)

```{r, echo=TRUE}
round(9.5)
```

## Comparison operators

Comparison operators compare two values and return either `TRUE` or `FALSE`.

```{r, echo=TRUE}
# Is the rounded value of 9.4 equal to 10?
round(9.4) == 10
```

```{r, echo=TRUE}
# Is the rounded value of 9.4 less than 10?
round(9.4) < 10
```



## Functions take arguments {.smaller}

- Arguments may be named. If unnamed, arguments are evaluated by position.
- If named, they may be evaluated in any order.

```{r, echo=TRUE}
# here, we're rounding the almost_pi object
round(almost_pi)
round(almost_pi, digits = 6)
# this is the same as above because digits is the first argument
round(almost_pi, 6)
# this is the same as above, but because we name x, we can invert the order:
round(digits = 6, x = almost_pi)
```

## Pipes

- Pipes `|>` chain functions together.
- They pass the output of one function to the first input (often `x`) of the next function.
- They improve readability and reduce the need for intermediate objects.

## Why are pipes `|>` useful?

```{r, echo=TRUE}
# this is hard to read
# you evaluate expressions from the innermost to the outermost
abs(tan(log(exp(8), base = 2)))

# this is annoying to write
temp <- exp(8)
temp <- log(temp, base = 2)
temp <- tan(temp)
temp <- abs(temp)
temp
```

```{r, echo=TRUE}
# pipes are easier to read and easier to write
8 |>
  exp() |>
  log(base = 2) |>
  tan() |>
  abs()
```

## Formatting code

- Well formatted code is not just nice.
  - It's essential when you share your code with others, or need to read it later.
- The formatting guidelines we use are not my opinions.
  - They're from the [`tidyverse` style guide](https://style.tidyverse.org).
- Some rules I will enforce:

## Spacing around operators

Put spaces before and after operators.

```{r, echo=TRUE}
# bad spacing is hard to read
bad<-1+2/3

# good spacing
good <- 1 + 2 / 3
```

But as in English prose, no space *before* a comma:

```{r, echo=TRUE}
# bad spacing is unnatural
bad <- round(almost_pi , 2)

# good spacing
good <- round(almost_pi, 2)
```

## Pipe spacing

Pipes `|>` require vertical and horizontal spacing:

```{r, echo=TRUE}
# bad spacing
8|>exp()|>log(base=2)|>tan()|>abs()

# good spacing: note the indentations (tabs) after the first pipe
8 |>
  exp() |>
  log(base = 2) |>
  tan() |>
  abs()
```

## Naming stuff

Bad object names make code hard for you and your readers to understand.

Rules for names:

1. Use lowercase letters, numbers, and underscores.
2. Use [snake case](https://en.wikipedia.org/wiki/Snake_case) (e.g., `snake_case`).
3. Write the shortest, clearest name you can.

## Naming stuff: examples

- Horrible: `WeightOfDogInKilograms`
- Bad: `weight_of_dog_in_kg`
- Okay: `dog_weight`
- Best: `weight`

The last and best option is only available if your data is structured correctly!

## Running code in `.Rmd` files

There are many ways to run code in an `.Rmd` file:

- Click the green play button in the RStudio script editor.
- Use the Command Pallette (Cmd + Shift + P) and search for "Run the current code chunk."
- Keyboard shortcuts: Ctrl + Shift + Enter (Windows) or ⌘ + Shift + Enter (macOS)
- Click the Knit button to render the entire document as an HTML file.

## In-class practice

1. Go to [Course Documents](https://blackboard.richmond.edu/webapps/blackboard/content/listContentEditable.jsp?content_id=_1725326_1&course_id=_56262_1&mode=reset) in Blackboard.
2. Download `notebook (.Rmd)` file from the folder `01-Tabular Data`.
3. Move that file to your the `nb` directory in your `DSST289` folder:
   - `DSST289/nb/notebook01.Rmd`
4. Open that file in RStudio and try the problems.