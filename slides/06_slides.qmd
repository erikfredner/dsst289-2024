---
title: "Creating features with *Animal Crossing* data"
subtitle: "DSST 289: Introduction to Data Science"
author: "Erik Fredner"
date: "`r Sys.Date()`"
echo: true
format:
  revealjs:
    logo: "images/by-sa.png"
    footer: "https://fredner.org"
    embed-resources: true
    scrollable: true
editor_options: 
  chunk_output_type: console
---

# Overview

- Exam reminders
- 🧶 Knitting follow-up
-   🐟 *Animal Crossing* data 
-   `mutate()`
-   `if_else()`
-   `case_when()`

# Exam reminders 1

- Exam 01 take-home will be available today at 2pm
  - You will receive an automated email announcing availability
  - It will be in Blackboard > Course Documents > Exams > Exam 01
- Take-home is due by the beginning of our class Wednesday
  - You may spend as much time as you want on it
  - I expect it will take 60-90 minutes

# Exam reminders 2 {.smaller}

- You may reference notes, notebooks, and slides on the take-home
  - Material from today **is** on the take-home
- In class portion of the exam on Wednesday
  - Not allowed to use anything other than pen and paper
  - In class question types:
    - recreate graph
    - recreate table
    - fill in blanks in code
- Questions?

# 🧶 Knitting follow-up

- Turns out Blackboard does not permit students to upload `.html` files
- Two alternatives:
  - Knit to `.pdf`
  - `.zip` the `.html`

## Knit to `.pdf`

![Knit to `.pdf` option](images/knit_pdf.png)

## Knit to `.pdf` installation

:::{.callout-tip title="If you need to install TinyTeX"}
`tinytex::install_tinytex()`
:::


## `.zip` the `.html` (Mac)

If knitting to `.pdf` does not work, compress your `.html` file like so:

![Compress `.html` file (Mac)](images/zip_html.png)

## `.zip` the `.html` (Windows)

Instructions for Windows [here](https://support.microsoft.com/en-us/windows/zip-and-unzip-files-8d28fa72-f2f9-712f-67df-f80cf89fd4e5).

![Compress files (Windows)](images/zip_windows.png)

# 🎣 = 💰

What is the best way to make money fishing?

![Fishing in *Animal Crossing*](images/fishing.jpg)

## *Animal Crossing* fish data

```{r}
#| echo: false

library(tidyverse)
library(knitr)
library(ggrepel)
library(clipr)
library(patchwork)
library(scales)

fish <- read_csv(file.path("..", "data", "acnh_fish.csv"))

# separate the spawn_rates
fish <- fish |>
  separate(spawn_rates, into = c("spawn_low", "spawn_high"), sep = "–", fill = "right") |>
  mutate(spawn_high = if_else(is.na(spawn_high), spawn_low, spawn_high)) |>
  mutate(
    spawn_low = as.numeric(spawn_low),
    spawn_high = as.numeric(spawn_high)
  ) |>
  # separate location
  separate(location, into = c("location", "location_condition"), sep = " \\(", fill = "right") |>
  # remove trailing )
  mutate(location_condition = gsub("\\)", "", location_condition))

fish |>
  select(name, value, location, spawn_low, spawn_high) |>
  slice_sample(n = 5) |>
  kable()
```

# `mutate`ing spawn rates

-   Spawn rates tell us how likely we are to see a fish.
-   Higher values are more common than low values.

```{r}
#| output-location: slide
#| code-line-numbers: "2|3|4"
fish |>
  mutate(spawn_rate = (spawn_low + spawn_high) / 2) |>
  select(name, spawn_low, spawn_high, spawn_rate) |>
  arrange(desc(spawn_rate)) |>
  slice_head(n = 5) |> 
  kable()
```

# `mutate` with `if_else`

```{r}
#| output-location: fragment
#| code-line-numbers: "4"
fish |>
  mutate(
    spawn_rate = (spawn_low + spawn_high) / 2,
    spawn_freq = if_else(spawn_rate > 10, "common", "rare")
  ) |>
  select(name, spawn_rate, spawn_freq) |>
  arrange(desc(spawn_rate)) |>
  slice_sample(n = 2) |> 
  kable()
```

## Is common vs. rare enough?

```{r}
#| output-location: slide
#| code-line-numbers: "2-5|6-8"
fish |>
  mutate(
    spawn_rate = (spawn_low + spawn_high) / 2,
    spawn_freq = if_else(spawn_rate > 10, "common", "rare")
  ) |>
  ggplot(aes(x = spawn_rate, y = value, color = spawn_freq)) +
  geom_point() +
  scale_color_viridis_d()
```

## Common vs. rare probably isn't enough

```{r}
#| code-line-numbers: "6"
fish |>
  mutate(
    spawn_rate = (spawn_low + spawn_high) / 2,
    spawn_freq = if_else(spawn_rate > 10, "common", "rare")
  ) |>
  count(spawn_freq) |> 
  kable()
```


# `mutate` + `case_when`

A useful combination to create new variables based on multiple conditions:

```{r}
#| code-line-numbers: "4-10"
fish <- fish |>
  mutate(
    spawn_rate = (spawn_low + spawn_high) / 2,
    spawn_freq = case_when(
      spawn_rate > 15 ~ "very common",
      spawn_rate > 10 ~ "common",
      spawn_rate > 5 ~ "uncommon",
      spawn_rate > 2 ~ "rare",
      spawn_rate <= 2 ~ "very rare",
      TRUE ~ "default"
    )
  )
```

```{r}
#| echo: false

# set factor order for plotting sanity
fish <- fish |> 
  mutate(spawn_freq = factor(spawn_freq, levels = c("very rare", "rare",
                                                    "uncommon", "common",
                                                    "very common", "default")))
```


## What that data looks like

```{r}
fish |>
  select(name, spawn_rate, spawn_freq) |>
  slice_sample(n = 5) |>
  arrange(spawn_rate) |>
  kable()
```

## Is the distribution better?

```{r}
fish |> 
  count(spawn_freq) |> 
  kable()
```


## Which fish are relatively valuable *and* relatively common?

```{r}
#| output-location: slide

fish |>
  ggplot(aes(x = spawn_rate, y = value, color = spawn_freq)) +
  geom_point() +
  scale_color_viridis_d()
```


# Where should we fish?

```{r}
fish |>
  select(name, location, location_condition) |>
  filter(!is.na(location_condition)) |>
  slice_sample(n = 3) |>
  kable()
```

## Where are the above-average fish?

```{r}
#| code-line-numbers: "2|3|4"
#| output-location: fragment
fish |>
  filter(value > mean(value)) |>
  count(location, location_condition) |>
  arrange(desc(n)) |>
  kable()
```

## Mean and median value by location

```{r}
#| code-line-numbers: "2-6"

fish |>
  group_by(location) |>
  summarize(median_value = median(value),
            mean_value = mean(value),
            min_value = min(value),
            max_value = max(value)) |>
  arrange(desc(mean_value)) |>
  kable()
```

## Location, location, location

```{r}
#| output-location: slide
#| code-line-numbers: "2|3|4|5"
fish |>
  filter(value > mean(value)) |>
  ggplot(aes(x = spawn_rate, y = value, color = location)) +
  geom_point() +
  geom_label_repel(aes(label = name)) +
  scale_color_viridis_d()
```


# Will we make more money if we catch less valuable fish more often?

## From spawn rate to spawn probability

```{r}
#| code-line-numbers: "2|3|4"
fish |>
  mutate(spawn_prob = spawn_rate / 100) |>
  select(name, location, spawn_rate, spawn_prob) |>
  slice_sample(n = 5) |>
  kable()
```

# Sneak preview: Fishing simulation

```{r}
#| echo: false
simulate_fishing <- function(sim_number, sample_size) {
  fish |>
    filter(location != "Pier") |> 
    mutate(spawn_prob = spawn_rate / 100) |>
    group_by(location) |>
    reframe(
      caught_fish = sample(name, size = sample_size, prob = spawn_prob, replace = TRUE),
      value_per_fish = value[match(caught_fish, name)],
      fish_number = 1:sample_size
    ) |>
    group_by(location) |>
    mutate(cumulative_value = cumsum(value_per_fish)) |>
    ungroup() |>
    ggplot(aes(x = fish_number, y = cumulative_value, color = location)) +
    geom_line(linewidth = 1.2) +
    scale_color_viridis_d()
}
```

## Catch 5 fish in each location 6 times

```{r}
#| echo: false

sample_size <- 5

plots <- lapply(1:6, function(sim_number) {
  simulate_fishing(sim_number, sample_size)
})

grid_plot <- wrap_plots(plots, ncol = 2)

print(grid_plot)
```

## Catch 50 fish 6 times

```{r}
#| echo: false

sample_size <- 50

plots <- lapply(1:6, function(sim_number) {
  simulate_fishing(sim_number, sample_size)
})

grid_plot <- wrap_plots(plots, ncol = 2)

print(grid_plot)
```

## Catch 5,000 fish 6 times

```{r}
#| echo: false

sample_size <- 5000

plots <- lapply(1:6, function(sim_number) {
  simulate_fishing(sim_number, sample_size)
})

grid_plot <- wrap_plots(plots, ncol = 2)

print(grid_plot)
```

## 🏆 MVF (Most Valuable Fish)

```{r}
#| echo: false

simulate_fishing_summary <- function(sample_size) {
  fish |>
    filter(location != "Pier") |> 
    mutate(spawn_prob = spawn_rate / 100) |> 
    reframe(
      caught_fish = sample(name, size = sample_size, prob = spawn_prob, replace = TRUE),
      value_per_fish = value[match(caught_fish, name)]
    ) |> 
    group_by(caught_fish) |> 
    summarize(
      total_caught = n(),
      total_value = sum(value_per_fish)
    ) |> 
    ungroup() |> 
    arrange(desc(total_value)) |> 
    mutate(
      total_value = dollar(total_value)
    )
}

sample_size <- 50000
simulation_results <- simulate_fishing_summary(sample_size)

simulation_results |> 
  knitr::kable()
```

