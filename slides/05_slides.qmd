---
title: "Summarizing and grouping *Star Wars* data"
subtitle: "DSST 289: Introduction to Data Science"
author: "Erik Fredner"
date: "`r Sys.Date()`"
echo: true
format:
  revealjs:
    logo: "images/by-sa.png"
    footer: "https://fredner.org"
    embed-resources: true
    scrollable: true
---

# Overview

- Homework
- Summarizing data with `summarize()`
- Grouping data with `group_by()`
- Handling missing values
- Visualizing summaries with `ggplot2`

# Homework

```{r}
library(tidyverse)
library(ggrepel)
library(knitr)

hans <- read_csv("../data/hans_roslin.csv")
hans |>
  select(country, continent, year, life_exp, gdp, pop) |> 
  # get a random sample of rows:
  slice_sample(n = 2) |>
  kable()
```

## 1. Compute the average life expectancy from the year 2007.

```{r}
hans |>
  filter(year == 2007) |>
  summarize(mean_life_exp = mean(life_exp))
```

```{r}
hans |>
  filter(year == 2007) |>
  pull(life_exp) |>
  mean()
```

## 2. Compute the average GDP from the year 2007.

```{r}
hans |>
  filter(year == 2007) |>
  summarize(mean_gdp = mean(gdp))
```

```{r}
hans |>
  filter(year == 2007) |>
  pull(gdp) |>
  mean()
```


## 3. Compute the average life expectancy of each continent in the year 2002.

```{r}
hans |>
  filter(year == 2002) |>
  group_by(continent) |>
  summarize(mean_life_exp = mean(life_exp))
```

## 4. Compute the total number of people living in each continent in the year 1957.

```{r}
hans |>
  filter(year == 1957) |>
  group_by(continent) |>
  summarize(total_pop = sum(pop))
```

## 5. Compute the total number of countries in each continent.

```{r}
hans |>
  group_by(continent) |>
  summarize(n_countries = n_distinct(country))
```

```{r}
hans |>
  # this works because there's one observation per country per year:
  filter(year == 2007) |>
  group_by(continent) |>
  summarize(n_countries = n())
```

# `summarize()`

`summarize()` reduces elements of a data frame with one of several summary
functions. It is a `dplyr` *verb*.

## *Star Wars* data

```{r}
starwars <- read_csv(file.path("..", "data", "starwars.csv"))

starwars |>
  select(name, height, mass, sex) |>
  slice_head(n = 5) |>
  # make the tables look nice on the slides:
  kable()
```

## `summarize`-ing height

```{r}
#| code-fold: false
starwars |>
  summarize(mean_height = mean(height, na.rm = TRUE))
```

## Why `na.rm = TRUE`?

The `na.rm` argument is used to remove `NA` values from the calculation.
It would be inaccurate to assume that these should be `0` (or any other value).
If `na.rm = FALSE`, the result will be not available:

```{r}
#| code-fold: false

starwars |> 
  summarize(mean_height = mean(height, na.rm = FALSE))
```

## How to find `na` values?

This is a common real world problem.

```{r}
#| code-fold: false
#| code-line-numbers: "3,4"
# Which starwars characters have missing heights?
starwars |>
  # is.na() returns TRUE if the value is NA:
  filter(is.na(height)) |>
  select(name, height) |>
  kable()
```

## `summarize`-ing height and mass

```{r}
#| code-fold: false
starwars |>
  summarize(
    mean_height = mean(height, na.rm = TRUE),
    mean_mass = mean(mass, na.rm = TRUE)
  )
```

# `group_by`

- `summarize`-ing single columns is not very interesting.
- `summarize()` gets interesting when we combine it with `group_by()`.

## `height` by `sex`

```{r}
#| code-line-numbers: "2-4"
starwars |>
  group_by(sex) |>
  # summarize within groups:
  summarize(mean_height = mean(height, na.rm = TRUE)) |>
  arrange(mean_height) |>
  kable()
```

## `group_by` multiple variables

```{r}
#| code-line-numbers: "2-3"
starwars |>
  group_by(sex, species) |>
  summarize(mean_height = mean(height, na.rm = TRUE)) |>
  arrange(mean_height) |>
  kable()
```

# additional `group` operations

## `n()` returns how many rows are in each group

```{r}
#| code-line-numbers: "2-3"
starwars |>
  group_by(species) |>
  summarize(n = n()) |>
  arrange(desc(n)) |>
  kable()
```

## `paste()` collapses values in character colums to strings

```{r}
#| code-line-numbers: "3,4"
starwars |>
  group_by(species) |>
  # you can use any string as a separator:
  summarize(names = paste(name, collapse = "️👽🛸🚀"))
```

# `groupby() |> summarize() |> ggplot()`

## `height` and `mass` grouped by `sex`

```{r}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "2|3|4-8|9|10|11"
starwars |>
  filter(!is.na(sex)) |> 
  group_by(sex) |>
  summarize(
    mean_height = mean(height, na.rm = TRUE),
    mean_mass = mean(mass, na.rm = TRUE),
    n = n()
  ) |>
  ggplot(aes(x = mean_height, y = mean_mass, size = n)) +
  geom_point() +
  geom_text_repel(aes(label = sex), size = 5)
```

## Who are the outliers?

```{r}
#| code-fold: false
#| code-line-numbers: "2"
starwars |>
  filter(sex %in% c("hermaphroditic", "none")) |>
  select(name, height, mass, sex) |>
  kable()
```

## When summarizing groups

- Be aware of missing data
- Be aware of outliers
- Be aware of how many items are in each group
  - The Jabba the Hutt problem
- Make sure that groups are comparable

# Summary

- Use `summarize()` to compute summary statistics.
- Combine `summarize()` with `group_by()` to perform group-wise summaries.
- Beware missing data! `na`, `None`, etc.
  - One way to handle missing data for grouping operations: `na.rm = TRUE`
- Visualize group summaries with `ggplot2`
