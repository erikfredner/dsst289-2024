---
title: "Notebook 16"
subtitle: "DSST289: Introduction to Data Science"
author: "Erik Fredner"
date: today
execute:
  echo: false
  warning: false
  message: false
  fig-height: 8
format:
  html:
    anchor-sections: true
    code-tools: false
    embed-resources: true
    link-external-icon: true
    link-external-newwindow: true
    number-sections: true
    smooth-scroll: true
    toc: true
editor:
  markdown:
    wrap: 72
---

## Getting Started

1. Click **Session > Clear Workspace...**
2. Click **Session > Restart R**
3. Run the following code chunk:

```{r}
library(tidyverse)
library(sf)
theme_set(theme_minimal())
```


## COVID-19 in France

Today we will look at COVID-19 data from France in several tables.

### Data

```{r}
covid <- read_csv("../data/france_departement_covid.csv")
covid

pop <- read_csv("../data/france_departement_population.csv")
pop

cities <- read_csv("../data/france_cities.csv")
cities

geo_fr <- read_sf("../data/france_departement.geojson") |>
  filter(departement <= "95")
geo_fr
```

#### Data description

- French départements are administrative divisions, similar to counties in the United States.
  - Note the French spellings of certain columns (e.g., `departement`)
- `covid` contains daily COVID-19 data for each département.
- `pop` contains population by département.
- `cities` contains longitudes and latitudes for large French cities.
- `geo_fr` contains spatial geometries for French départements.

### Analyses

First, produce a spatial plot of the `geo_fr` data with the default projection:

```{r, question-01}
geo_fr |>
  ggplot() +
  geom_sf()
```

Next, modify your plot to use the coordinate system with CRS number `2154`.

:::{.callout-note}
The CRS number `2154` is the [preferred projection](https://epsg.io/2154) for France.
:::

Use this transformation for all plots in the following questions using the French data.

```{r, question-02}
geo_fr |>
  st_transform(2154) |>
  ggplot() +
  geom_sf()
```

Now, filter the dataset `covid` to the date "2020-05-01" and left join it to `geo_fr` by the key "departement."

```{r, question-03}
covid |>
  filter(date == as_date("2020-05-01")) |>
  left_join(geo_fr, by = "departement")
```

:::{.callout-note}
The output of the join no longer has the special spatial header, because the join strips the `sf` class.
:::

In the block below, copy your code from the previous question and add an extra
line with the function `st_as_sf()`. This will let R know that the resulting 
dataset should retain all of the spatial information.

```{r, question-04}
covid |>
  filter(date == as_date("2020-05-01")) |>
  left_join(geo_fr, by = "departement") |>
  st_as_sf()
```

This output **keeps** the spatial information.

Starting with the code above, plot a map of the French
départements according to the the number of people that were hospitalized on
1 May 2020. Use the `scale_fill_distiller` color scale as described in the notes.

```{r, question-05}
covid |>
  filter(date == as_date("2020-05-01")) |>
  left_join(geo_fr, by = "departement") |>
  st_as_sf() |>
  st_transform(2154) |>
  ggplot() +
  geom_sf(aes(fill = hospitalised)) +
  scale_fill_distiller(
    trans = "log2",
    palette = "Spectral",
    guide = "legend",
    n.breaks = 10
  )
```

:::{.callout-warning}
This map is not normalized by population. Without normalization, regions with larger populations might misleadingly appear to have *relatively* higher hospitalization numbers.
:::

Adapt your code above in the block below by joining in the `pop` dataset. Calculate the hospitalization rate per 100,000 people by dividing the number of hospitalized people by the départment population and multiplying the result by 100,000. Then fill the spatial polygons with that rate.

```{r, question-06}
covid |>
  filter(date == as_date("2020-05-01")) |>
  left_join(geo_fr, by = "departement") |>
  left_join(pop, by = "departement") |>
  mutate(rate = (hospitalised / population) * 100000) |> 
  st_as_sf() |>
  st_transform(2154) |>
  ggplot() +
  geom_sf(aes(fill = rate)) +
  scale_fill_distiller(
    trans = "log2",
    palette = "Spectral",
    guide = "legend",
    n.breaks = 10
  )
```

Now, we're going to add a new layer to our plot with the locations of major French cities. First, create a spatial points version of the cities data with longitude and latitude as coordinates and save it as an object called `cities_geo`.

```{r, question-07}
cities_geo <- cities |>
  st_as_sf(coords = c("lon", "lat"), crs = 4326, remove = FALSE)
```

Next, create a spatial plot with the `cities_geo` dataset that shows the labels of the cities. You can use the options `size`, `nudge_x`, and `nudge_y` to play around with the placement of the city names. Your goal should be to create an effect similar to `geom_text_repel`. Finally, don't forget the `coord_sf()` layer to make the plot using a proper map coordinate system.

```{r, warning = FALSE, question-08}
cities_geo |>
  st_transform(2154) |>
  ggplot() +
  geom_sf_text(aes(label = city), nudge_y = 0.1, size = 4) +
  coord_sf()
```

Now, combine the hopsitalization rate map with the cities data in a single plot. Include both points and text labels for the cities. My output fills by the hospitalization rate, but makes the colors partially transparent.

```{r, warning = FALSE, question-09}
covid |>
  filter(date == as_date("2020-05-01")) |>
  left_join(geo_fr, by = "departement") |>
  left_join(pop, by = "departement") |>
  mutate(rate = hospitalised / population * 100000) |>
  st_as_sf() |>
  st_transform(2154) |>
  ggplot() +
  geom_sf(aes(fill = rate), alpha = 0.4) +
  geom_sf(data = cities_geo, size = 0.5) +
  geom_sf_text(
    aes(label = city),
    data = cities_geo,
    nudge_y = 20000,
    size = 2
  ) +
  scale_fill_distiller(
    trans = "log2",
    palette = "Spectral",
    guide = "legend",
    n.breaks = 10
  )
```

## Manhattan roads

Spatial data can also associate lines with each *row* rather than a single point
or an entire polygon.

### Data

Let's read in a dataset of roads in the borough of Manhattan in New York City.

```{r}
nyc <- read_sf("../data/ny_roads.geojson")
nyc
```

### Visualizing roads

Spatial lines can be plotted with `geom_sf` much like spatial points. As with
points, we can do this without specifying any x- or y-aesthetic. Try this here
with the `nyc` data; you should see the shape of the city.

```{r, question-10}
nyc |>
  ggplot() +
  geom_sf()
```

And again, as with points, we can change the color and size of the lines if 
needed. Below, repeat your plot of the NYC roads, but change the color of the segments.

```{r, question-11}
nyc |>
  ggplot() +
  geom_sf(color = "pink")
```

### Geospatial summaries

There are a number of functions that compute summaries of spatial data. For example, the following code will retrieve the length of a line geometry in meters as a number:

```r
mutate(len = as.numeric(st_length(geometry)))
```
  
Below, use this to sort the output from the longest to the shortest road in Manhattan:

```{r, question-12a}
nyc |>
  mutate(len = as.numeric(st_length(geometry))) |>
  arrange(desc(len))
```

:::{.callout-note}
Some of the city roads have duplicates because there are multiple
segments of a road broken up by some other feature, like an interchange.
:::

Now, use the summary calculated above to color the roads in Manhattan based on length. Use the `scale_color_distiller()` with 5 breaks.

```{r, question-12b}
nyc |>
  mutate(len = as.numeric(st_length(geometry))) |>
  ggplot() +
  geom_sf(aes(color = len)) +
  scale_color_distiller(
    trans = "log2",
    palette = "Spectral",
    guide = "legend",
    n.breaks = 5
  )
```

Let's plot a single famous road. In the block below, create a new data set named `nyc_broad` that only contains segments of Broadway.

```{r, question-13}
nyc_broad <- nyc |>
  filter(name == "Broadway")
```

Now, map the streets of Manhattan with reduced transparency (`alpha = 0.1`). Add another opaque layer containing Broadway. Apply `theme_void()` to this plot to eliminate the grid.

```{r, question-14}
nyc |>
  ggplot() +
  geom_sf(alpha = 0.1) +
  geom_sf(data = nyc_broad) +
  theme_void()
```
